//Yuxuan Huang
//csci315 prelab2

#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>


#define BUFFER_SIZE 25
#define READ_END 0
#define WRITE_END 1

int main(void){
    char write_msg[BUFFER_SIZE] = "Greetings\n";
    char read_msg[BUFFER_SIZE];
    int fd[2];
    pid_t pid;
    int i=0;
    
    /*create the pipe*/
    if (pipe(fd) == -1){
        fprintf(stderr, "Pipe failed");
        return 1;
        
    }
    /*fork a child*/
    pid = fork();
    
    if(pid < 0){
        fprintf(stderr, "Fork Failed");
        return 1;
        
    }
    if (pid > 0){/* parent process*/
        /*close the unused end of the pipe*/
        close(fd[READ_END]);
        
        /*write to the pipe*/
	while(write_msg[i]!="\0"){
	  write(fd[WRITE_END],write_msg[i],1);
	  i++;
	}
	write(fd[WRITE_END],write_msg[i],1);
	i=0;
        //write(fd[WRITE_END],write_msg,strlen(write_msg)+1);
        
        /*close the write end of the pipe*/
        close(fd[WRITE_END]);
        
    }
    else{/*child process*/
        /*close the unused end of the pipe*/
        close(fd[WRITE_END]);

        /*read from the pipe*/
        while(read_msg!="\0"){
	  read(fd[READ_END],read_msg,1);
	  printf("%s\n",read_msg);
	}
        //read(fd[READ_END],read_msg,BUFFER_SIZE);
	// printf("read %s",read_msg);
        
        /*close the write end of the pipe*/
        close(fd[READ_END]);
    }
    return 0;
}


pid_t Fork(void){
    pid_t the_fork;
    
    the_fork = fork();
    
    if (the_fork == -1){
        perror("fork");
        //printf("errno = %d.\n",errno);
        exit(-1);
    }
    else {
        exit(0);
    }
}
